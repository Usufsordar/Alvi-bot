const { getTime } = global.utils;
const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
	config: {
		name: "groupEventsBN",
		version: "2.1",
		author: "Royal Custom by ChatGPT",
		category: "events"
	},

	onStart: async ({ api, message, event }) => {
		const { threadID, logMessageType, logMessageData, type, body, reaction } = event;

		const threadInfo = await api.getThreadInfo(threadID);
		const memberCount = threadInfo.participantIDs.length;
		const adminCount = threadInfo.adminIDs.length;
		const currentTime = new Date().toLocaleTimeString("bn-BD");
		const joinDate = new Date().toLocaleDateString("bn-BD", {
			day: 'numeric',
			month: 'long',
			year: 'numeric'
		});
		const uptime = process.uptime();
		const hours = Math.floor(uptime / 3600);
		const minutes = Math.floor((uptime % 3600) / 60);
		const prefix = global.utils.getPrefix(threadID);

		const cacheDir = path.join(__dirname, "cache");
		if (!fs.existsSync(cacheDir)) {
			fs.mkdirSync(cacheDir);
		}

		// --- Welcome Member ---
		if (logMessageType === "log:subscribe") {
			const botJoin = logMessageData.addedParticipants.find(p => p.userFbId == api.getCurrentUserID());
			if (botJoin) {
				const msg =
`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ñ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ü§ñ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ ‡¶¨‡¶ü Prefix: ${prefix}
üìú ‡¶∏‡¶ï‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: ${prefix}help

‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ú‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶§‡ßã?
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
				return message.send(msg);
			}

			const newUser = logMessageData.addedParticipants[0];
			const userName = newUser.fullName;
			const userID = newUser.userFbId;

			const welcomeImgURL = "https://i.ibb.co.com/9mVK24DX/welcome-image.jpg";
			const welcomeImgPath = path.join(cacheDir, "welcome.jpg");

			const responseWelcome = await axios.get(welcomeImgURL, { responseType: "stream" });
			const writerWelcome = fs.createWriteStream(welcomeImgPath);
			responseWelcome.data.pipe(writerWelcome);

			await new Promise((resolve, reject) => {
				writerWelcome.on("finish", resolve);
				writerWelcome.on("error", reject);
			});

			const welcomeMsg =
`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåü ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶§‡¶ø‡¶•‡¶ø üåü
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ${userName}!

‡¶Ü‡¶™‡¶®‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ${memberCount} ‡¶§‡¶Æ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡•§

üìÖ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: ${joinDate}
‚è±Ô∏è ‡¶¨‡¶ü ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶Ü‡¶õ‡ßá: ${hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ${minutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
üë• ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø: ${memberCount} ‡¶ú‡¶®
üõ°Ô∏è ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: ${adminCount} ‡¶ú‡¶®

‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡¶ø ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡¶ü‡¶æ ‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶ï‡¶æ‡¶ü‡¶¨‡ßá!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

			return message.send({
				body: welcomeMsg,
				attachment: fs.createReadStream(welcomeImgPath),
				mentions: [{ tag: userName, id: userID }]
			});
		}

		// --- Member Left ---
		if (logMessageType === "log:unsubscribe") {
			const leftID = logMessageData.leftParticipantFbId;
			if (leftID == api.getCurrentUserID()) return;

			const leftUser = await api.getUserInfo(leftID);
			const name = leftUser[leftID]?.name || "‡¶ï‡ßá‡¶â";

			const leaveImgURL = "https://i.ibb.co.com/p6wznzgc/leave-image.jpg";
			const leaveImgPath = path.join(cacheDir, "leave.jpg");

			const responseLeave = await axios.get(leaveImgURL, { responseType: "stream" });
			const writerLeave = fs.createWriteStream(leaveImgPath);
			responseLeave.data.pipe(writerLeave);

			await new Promise((resolve, reject) => {
				writerLeave.on("finish", resolve);
				writerLeave.on("error", reject);
			});

			const byeMsg =
`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üëã ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶¨‡¶ø‡¶¶‡¶æ‡ßü
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${name} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡ßú‡ßá ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤...

‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

			return message.send({
				body: byeMsg,
				attachment: fs.createReadStream(leaveImgPath)
			});
		}

		// --- Other Events (same as before) ---
		if (logMessageType === "log:thread-name") {
			const newName = logMessageData.name;
			return message.send(`‚ö†Ô∏è ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶è‡¶ñ‡¶® "${newName}" ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶®‡¶æ‡¶Æ!`);
		}
		if (logMessageType === "log:thread-nickname") {
			const newNick = logMessageData.nickname;
			const changedFor = logMessageData.participant_id;
			return message.send(`${changedFor} ‡¶è‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® nickname: "${newNick}" ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!`);
		}
		if (logMessageType === "log:thread-icon") {
			const emoji = logMessageData.icon;
			return message.send(`‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶è‡¶ñ‡¶®: ${emoji}`);
		}
		if (logMessageType === "log:call") {
			return message.send("üìû ‡¶ï‡¶≤ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶∏‡¶¨‡¶æ‡¶á ‡¶ú‡ßü‡ßá‡¶® ‡¶π‡¶ì ‡¶≠‡¶æ‡¶á‡¶∞‡¶æ!");
		}
		if (logMessageType === "log:call-ended") {
			const dur = logMessageData.callDuration;
			const m = Math.floor(dur / 60);
			const s = dur % 60;
			return message.send(`üì¥ ‡¶ï‡¶≤ ‡¶∂‡ßá‡¶∑! ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü: ${m} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ${s} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°!`);
		}
		if (type === "message_reaction" && reaction === "üòÇ") {
			return message.send("‡¶Æ‡¶ú‡¶æ ‡¶™‡¶æ‡¶á‡¶≤‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø?");
		}
		if (type === "message" && body?.toLowerCase().includes("@everyone")) {
			const mentions = threadInfo.participantIDs.map(id => ({ id, tag: " " }));
			return message.send({
				body: `@everyone ‡¶¨‡¶≤‡ßá‡¶õ‡ßá‡¶®! ‡¶∏‡¶¨‡¶æ‡¶á ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶æ‡¶ì!`,
				mentions
			});
		}
	}
};
